// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: exprml/v1/expr.proto

package exprmlv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Kind is the kind of the Node.
type Expr_Kind int32

const (
	// Unspecified.
	Expr_UNSPECIFIED Expr_Kind = 0
	// Eval kind.
	Expr_EVAL Expr_Kind = 10
	// Scalar kind.
	Expr_SCALAR Expr_Kind = 11
	// Ref kind.
	Expr_REF Expr_Kind = 12
	// Obj kind.
	Expr_OBJ Expr_Kind = 13
	// Arr kind.
	Expr_ARR Expr_Kind = 14
	// Json kind.
	Expr_JSON Expr_Kind = 15
	// Iter kind.
	Expr_ITER Expr_Kind = 16
	// Elem kind.
	Expr_ELEM Expr_Kind = 17
	// Call kind.
	Expr_CALL Expr_Kind = 18
	// Cases kind.
	Expr_CASES Expr_Kind = 19
	// OpUnary kind.
	Expr_OP_UNARY Expr_Kind = 20
	// OpBinary kind.
	Expr_OP_BINARY Expr_Kind = 21
	// OpVariadic kind.
	Expr_OP_VARIADIC Expr_Kind = 22
)

// Enum value maps for Expr_Kind.
var (
	Expr_Kind_name = map[int32]string{
		0:  "UNSPECIFIED",
		10: "EVAL",
		11: "SCALAR",
		12: "REF",
		13: "OBJ",
		14: "ARR",
		15: "JSON",
		16: "ITER",
		17: "ELEM",
		18: "CALL",
		19: "CASES",
		20: "OP_UNARY",
		21: "OP_BINARY",
		22: "OP_VARIADIC",
	}
	Expr_Kind_value = map[string]int32{
		"UNSPECIFIED": 0,
		"EVAL":        10,
		"SCALAR":      11,
		"REF":         12,
		"OBJ":         13,
		"ARR":         14,
		"JSON":        15,
		"ITER":        16,
		"ELEM":        17,
		"CALL":        18,
		"CASES":       19,
		"OP_UNARY":    20,
		"OP_BINARY":   21,
		"OP_VARIADIC": 22,
	}
)

func (x Expr_Kind) Enum() *Expr_Kind {
	p := new(Expr_Kind)
	*p = x
	return p
}

func (x Expr_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expr_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_exprml_v1_expr_proto_enumTypes[0].Descriptor()
}

func (Expr_Kind) Type() protoreflect.EnumType {
	return &file_exprml_v1_expr_proto_enumTypes[0]
}

func (x Expr_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Expr_Kind.Descriptor instead.
func (Expr_Kind) EnumDescriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{0, 0}
}

// Op is a operator.
type OpUnary_Op int32

const (
	// Unspecified.
	OpUnary_UNSPECIFIED OpUnary_Op = 0
	// Len operator.
	OpUnary_LEN OpUnary_Op = 1
	// Not operator.
	OpUnary_NOT OpUnary_Op = 2
	// Flat operator.
	OpUnary_FLAT OpUnary_Op = 3
	// Floor operator.
	OpUnary_FLOOR OpUnary_Op = 4
	// Ceil operator.
	OpUnary_CEIL OpUnary_Op = 5
	// Abort operator.
	OpUnary_ABORT OpUnary_Op = 6
)

// Enum value maps for OpUnary_Op.
var (
	OpUnary_Op_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "LEN",
		2: "NOT",
		3: "FLAT",
		4: "FLOOR",
		5: "CEIL",
		6: "ABORT",
	}
	OpUnary_Op_value = map[string]int32{
		"UNSPECIFIED": 0,
		"LEN":         1,
		"NOT":         2,
		"FLAT":        3,
		"FLOOR":       4,
		"CEIL":        5,
		"ABORT":       6,
	}
)

func (x OpUnary_Op) Enum() *OpUnary_Op {
	p := new(OpUnary_Op)
	*p = x
	return p
}

func (x OpUnary_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpUnary_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_exprml_v1_expr_proto_enumTypes[1].Descriptor()
}

func (OpUnary_Op) Type() protoreflect.EnumType {
	return &file_exprml_v1_expr_proto_enumTypes[1]
}

func (x OpUnary_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpUnary_Op.Descriptor instead.
func (OpUnary_Op) EnumDescriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{11, 0}
}

// Op is a operator.
type OpBinary_Op int32

const (
	// Unspecified.
	OpBinary_UNSPECIFIED OpBinary_Op = 0
	// Sub operator.
	OpBinary_SUB OpBinary_Op = 1
	// Div operator.
	OpBinary_DIV OpBinary_Op = 2
	// Eq operator.
	OpBinary_EQ OpBinary_Op = 3
	// Neq operator.
	OpBinary_NEQ OpBinary_Op = 4
	// Lt operator.
	OpBinary_LT OpBinary_Op = 5
	// Lte operator.
	OpBinary_LTE OpBinary_Op = 6
	// Gt operator.
	OpBinary_GT OpBinary_Op = 7
	// Gte operator.
	OpBinary_GTE OpBinary_Op = 8
)

// Enum value maps for OpBinary_Op.
var (
	OpBinary_Op_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUB",
		2: "DIV",
		3: "EQ",
		4: "NEQ",
		5: "LT",
		6: "LTE",
		7: "GT",
		8: "GTE",
	}
	OpBinary_Op_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SUB":         1,
		"DIV":         2,
		"EQ":          3,
		"NEQ":         4,
		"LT":          5,
		"LTE":         6,
		"GT":          7,
		"GTE":         8,
	}
)

func (x OpBinary_Op) Enum() *OpBinary_Op {
	p := new(OpBinary_Op)
	*p = x
	return p
}

func (x OpBinary_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpBinary_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_exprml_v1_expr_proto_enumTypes[2].Descriptor()
}

func (OpBinary_Op) Type() protoreflect.EnumType {
	return &file_exprml_v1_expr_proto_enumTypes[2]
}

func (x OpBinary_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpBinary_Op.Descriptor instead.
func (OpBinary_Op) EnumDescriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{12, 0}
}

// Op is a operator.
type OpVariadic_Op int32

const (
	// Unspecified.
	OpVariadic_UNSPECIFIED OpVariadic_Op = 0
	// Add operator.
	OpVariadic_ADD OpVariadic_Op = 1
	// Mul operator.
	OpVariadic_MUL OpVariadic_Op = 2
	// And operator.
	OpVariadic_AND OpVariadic_Op = 3
	// Or operator.
	OpVariadic_OR OpVariadic_Op = 4
	// Cat operator.
	OpVariadic_CAT OpVariadic_Op = 5
	// Min operator.
	OpVariadic_MIN OpVariadic_Op = 6
	// Max operator.
	OpVariadic_MAX OpVariadic_Op = 7
	// Merge operator.
	OpVariadic_MERGE OpVariadic_Op = 8
)

// Enum value maps for OpVariadic_Op.
var (
	OpVariadic_Op_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ADD",
		2: "MUL",
		3: "AND",
		4: "OR",
		5: "CAT",
		6: "MIN",
		7: "MAX",
		8: "MERGE",
	}
	OpVariadic_Op_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ADD":         1,
		"MUL":         2,
		"AND":         3,
		"OR":          4,
		"CAT":         5,
		"MIN":         6,
		"MAX":         7,
		"MERGE":       8,
	}
)

func (x OpVariadic_Op) Enum() *OpVariadic_Op {
	p := new(OpVariadic_Op)
	*p = x
	return p
}

func (x OpVariadic_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpVariadic_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_exprml_v1_expr_proto_enumTypes[3].Descriptor()
}

func (OpVariadic_Op) Type() protoreflect.EnumType {
	return &file_exprml_v1_expr_proto_enumTypes[3]
}

func (x OpVariadic_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpVariadic_Op.Descriptor instead.
func (OpVariadic_Op) EnumDescriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{13, 0}
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path is the path to the Node.
	Path *Expr_Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Value is the JSON value of the Node.
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Kind is the kind of the Expr.
	Kind Expr_Kind `protobuf:"varint,3,opt,name=kind,proto3,enum=exprml.v1.Expr_Kind" json:"kind,omitempty"`
	// Eval is an Eval Expr.
	Eval *Eval `protobuf:"bytes,10,opt,name=eval,proto3" json:"eval,omitempty"`
	// Scalar is a Scalar Expr.
	Scalar *Scalar `protobuf:"bytes,11,opt,name=scalar,proto3" json:"scalar,omitempty"`
	// Ref is a Ref Expr.
	Ref *Ref `protobuf:"bytes,12,opt,name=ref,proto3" json:"ref,omitempty"`
	// Obj is an Obj Expr.
	Obj *Obj `protobuf:"bytes,13,opt,name=obj,proto3" json:"obj,omitempty"`
	// Arr is an Arr Expr.
	Arr *Arr `protobuf:"bytes,14,opt,name=arr,proto3" json:"arr,omitempty"`
	// Json is a Json Expr.
	Json *Json `protobuf:"bytes,15,opt,name=json,proto3" json:"json,omitempty"`
	// Iter is an Iter Expr.
	Iter *Iter `protobuf:"bytes,16,opt,name=iter,proto3" json:"iter,omitempty"`
	// Elem is an Elem Expr.
	Elem *Elem `protobuf:"bytes,17,opt,name=elem,proto3" json:"elem,omitempty"`
	// Call is a Call Expr.
	Call *Call `protobuf:"bytes,18,opt,name=call,proto3" json:"call,omitempty"`
	// Cases is a Cases Expr.
	Cases *Cases `protobuf:"bytes,19,opt,name=cases,proto3" json:"cases,omitempty"`
	// OpUnary is an OpUnary Expr.
	OpUnary *OpUnary `protobuf:"bytes,20,opt,name=op_unary,json=opUnary,proto3" json:"op_unary,omitempty"`
	// OpBinary is an OpBinary Expr.
	OpBinary *OpBinary `protobuf:"bytes,21,opt,name=op_binary,json=opBinary,proto3" json:"op_binary,omitempty"`
	// OpVariadic is an OpVariadic Expr.
	OpVariadic *OpVariadic `protobuf:"bytes,22,opt,name=op_variadic,json=opVariadic,proto3" json:"op_variadic,omitempty"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	mi := &file_exprml_v1_expr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{0}
}

func (x *Expr) GetPath() *Expr_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Expr) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Expr) GetKind() Expr_Kind {
	if x != nil {
		return x.Kind
	}
	return Expr_UNSPECIFIED
}

func (x *Expr) GetEval() *Eval {
	if x != nil {
		return x.Eval
	}
	return nil
}

func (x *Expr) GetScalar() *Scalar {
	if x != nil {
		return x.Scalar
	}
	return nil
}

func (x *Expr) GetRef() *Ref {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Expr) GetObj() *Obj {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *Expr) GetArr() *Arr {
	if x != nil {
		return x.Arr
	}
	return nil
}

func (x *Expr) GetJson() *Json {
	if x != nil {
		return x.Json
	}
	return nil
}

func (x *Expr) GetIter() *Iter {
	if x != nil {
		return x.Iter
	}
	return nil
}

func (x *Expr) GetElem() *Elem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *Expr) GetCall() *Call {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *Expr) GetCases() *Cases {
	if x != nil {
		return x.Cases
	}
	return nil
}

func (x *Expr) GetOpUnary() *OpUnary {
	if x != nil {
		return x.OpUnary
	}
	return nil
}

func (x *Expr) GetOpBinary() *OpBinary {
	if x != nil {
		return x.OpBinary
	}
	return nil
}

func (x *Expr) GetOpVariadic() *OpVariadic {
	if x != nil {
		return x.OpVariadic
	}
	return nil
}

// Eval is an Eval expression.
type Eval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Eval is an expression to evaluate.
	Eval *Expr `protobuf:"bytes,1,opt,name=eval,proto3" json:"eval,omitempty"`
	// Where is a list of definitions.
	Where []*Eval_Definition `protobuf:"bytes,2,rep,name=where,proto3" json:"where,omitempty"`
}

func (x *Eval) Reset() {
	*x = Eval{}
	mi := &file_exprml_v1_expr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Eval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eval) ProtoMessage() {}

func (x *Eval) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eval.ProtoReflect.Descriptor instead.
func (*Eval) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{1}
}

func (x *Eval) GetEval() *Expr {
	if x != nil {
		return x.Eval
	}
	return nil
}

func (x *Eval) GetWhere() []*Eval_Definition {
	if x != nil {
		return x.Where
	}
	return nil
}

// Scalar is a Scalar expression.
type Scalar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scalar is a scalar value.
	Scalar *Value `protobuf:"bytes,1,opt,name=scalar,proto3" json:"scalar,omitempty"`
}

func (x *Scalar) Reset() {
	*x = Scalar{}
	mi := &file_exprml_v1_expr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalar) ProtoMessage() {}

func (x *Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalar.ProtoReflect.Descriptor instead.
func (*Scalar) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{2}
}

func (x *Scalar) GetScalar() *Value {
	if x != nil {
		return x.Scalar
	}
	return nil
}

// Ref is a Ref expression.
type Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ident is the identifier of the reference.
	Ident string `protobuf:"bytes,1,opt,name=ident,proto3" json:"ident,omitempty"`
}

func (x *Ref) Reset() {
	*x = Ref{}
	mi := &file_exprml_v1_expr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref) ProtoMessage() {}

func (x *Ref) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref.ProtoReflect.Descriptor instead.
func (*Ref) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{3}
}

func (x *Ref) GetIdent() string {
	if x != nil {
		return x.Ident
	}
	return ""
}

// Obj is an Obj expression.
type Obj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Obj is an object.
	Obj map[string]*Expr `protobuf:"bytes,1,rep,name=obj,proto3" json:"obj,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Obj) Reset() {
	*x = Obj{}
	mi := &file_exprml_v1_expr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Obj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Obj) ProtoMessage() {}

func (x *Obj) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Obj.ProtoReflect.Descriptor instead.
func (*Obj) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{4}
}

func (x *Obj) GetObj() map[string]*Expr {
	if x != nil {
		return x.Obj
	}
	return nil
}

// Arr is an Arr expression.
type Arr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arr is an array.
	Arr []*Expr `protobuf:"bytes,1,rep,name=arr,proto3" json:"arr,omitempty"`
}

func (x *Arr) Reset() {
	*x = Arr{}
	mi := &file_exprml_v1_expr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Arr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arr) ProtoMessage() {}

func (x *Arr) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arr.ProtoReflect.Descriptor instead.
func (*Arr) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{5}
}

func (x *Arr) GetArr() []*Expr {
	if x != nil {
		return x.Arr
	}
	return nil
}

// Json is a Json expression.
type Json struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Json is a JSON value.
	Json *Value `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Json) Reset() {
	*x = Json{}
	mi := &file_exprml_v1_expr_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Json) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Json) ProtoMessage() {}

func (x *Json) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Json.ProtoReflect.Descriptor instead.
func (*Json) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{6}
}

func (x *Json) GetJson() *Value {
	if x != nil {
		return x.Json
	}
	return nil
}

// Iter is an Iter expression.
type Iter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PosIdent is the identifier of the position.
	PosIdent string `protobuf:"bytes,1,opt,name=pos_ident,json=posIdent,proto3" json:"pos_ident,omitempty"`
	// ElemIdent is the identifier of the element.
	ElemIdent string `protobuf:"bytes,2,opt,name=elem_ident,json=elemIdent,proto3" json:"elem_ident,omitempty"`
	// Col is the collection to iterate.
	Col *Expr `protobuf:"bytes,3,opt,name=col,proto3" json:"col,omitempty"`
	// Do is the body of the iteration.
	Do *Expr `protobuf:"bytes,4,opt,name=do,proto3" json:"do,omitempty"`
	// If is the condition of the iteration.
	If *Expr `protobuf:"bytes,5,opt,name=if,proto3" json:"if,omitempty"`
}

func (x *Iter) Reset() {
	*x = Iter{}
	mi := &file_exprml_v1_expr_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Iter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Iter) ProtoMessage() {}

func (x *Iter) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Iter.ProtoReflect.Descriptor instead.
func (*Iter) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{7}
}

func (x *Iter) GetPosIdent() string {
	if x != nil {
		return x.PosIdent
	}
	return ""
}

func (x *Iter) GetElemIdent() string {
	if x != nil {
		return x.ElemIdent
	}
	return ""
}

func (x *Iter) GetCol() *Expr {
	if x != nil {
		return x.Col
	}
	return nil
}

func (x *Iter) GetDo() *Expr {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *Iter) GetIf() *Expr {
	if x != nil {
		return x.If
	}
	return nil
}

// Elem is an Elem expression.
type Elem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Get is the expression to get the element.
	Get *Expr `protobuf:"bytes,1,opt,name=get,proto3" json:"get,omitempty"`
	// From is the index to get the element.
	From *Expr `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *Elem) Reset() {
	*x = Elem{}
	mi := &file_exprml_v1_expr_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Elem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Elem) ProtoMessage() {}

func (x *Elem) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Elem.ProtoReflect.Descriptor instead.
func (*Elem) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{8}
}

func (x *Elem) GetGet() *Expr {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *Elem) GetFrom() *Expr {
	if x != nil {
		return x.From
	}
	return nil
}

// Call is a Call expression.
type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ident is the identifier of the call.
	Ident string `protobuf:"bytes,1,opt,name=ident,proto3" json:"ident,omitempty"`
	// Args is the list of arguments.
	Args map[string]*Expr `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Call) Reset() {
	*x = Call{}
	mi := &file_exprml_v1_expr_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{9}
}

func (x *Call) GetIdent() string {
	if x != nil {
		return x.Ident
	}
	return ""
}

func (x *Call) GetArgs() map[string]*Expr {
	if x != nil {
		return x.Args
	}
	return nil
}

// Cases is a Cases expression.
type Cases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cases is a list of cases.
	Cases []*Cases_Case `protobuf:"bytes,1,rep,name=cases,proto3" json:"cases,omitempty"`
}

func (x *Cases) Reset() {
	*x = Cases{}
	mi := &file_exprml_v1_expr_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cases) ProtoMessage() {}

func (x *Cases) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cases.ProtoReflect.Descriptor instead.
func (*Cases) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{10}
}

func (x *Cases) GetCases() []*Cases_Case {
	if x != nil {
		return x.Cases
	}
	return nil
}

// OpUnary is an OpUnary expression.
type OpUnary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Op is the operator.
	Op OpUnary_Op `protobuf:"varint,1,opt,name=op,proto3,enum=exprml.v1.OpUnary_Op" json:"op,omitempty"`
	// Operand is the operand.
	Operand *Expr `protobuf:"bytes,2,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *OpUnary) Reset() {
	*x = OpUnary{}
	mi := &file_exprml_v1_expr_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpUnary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpUnary) ProtoMessage() {}

func (x *OpUnary) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpUnary.ProtoReflect.Descriptor instead.
func (*OpUnary) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{11}
}

func (x *OpUnary) GetOp() OpUnary_Op {
	if x != nil {
		return x.Op
	}
	return OpUnary_UNSPECIFIED
}

func (x *OpUnary) GetOperand() *Expr {
	if x != nil {
		return x.Operand
	}
	return nil
}

// OpBinary is an OpBinary expression.
type OpBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Op is the operator.
	Op OpBinary_Op `protobuf:"varint,1,opt,name=op,proto3,enum=exprml.v1.OpBinary_Op" json:"op,omitempty"`
	// Left is the left operand.
	Left *Expr `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	// Right is the right operand.
	Right *Expr `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *OpBinary) Reset() {
	*x = OpBinary{}
	mi := &file_exprml_v1_expr_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpBinary) ProtoMessage() {}

func (x *OpBinary) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpBinary.ProtoReflect.Descriptor instead.
func (*OpBinary) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{12}
}

func (x *OpBinary) GetOp() OpBinary_Op {
	if x != nil {
		return x.Op
	}
	return OpBinary_UNSPECIFIED
}

func (x *OpBinary) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *OpBinary) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

// OpVariadic is an OpVariadic expression.
type OpVariadic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Op is the operator.
	Op OpVariadic_Op `protobuf:"varint,1,opt,name=op,proto3,enum=exprml.v1.OpVariadic_Op" json:"op,omitempty"`
	// Operands is the list of operands.
	Operands []*Expr `protobuf:"bytes,2,rep,name=operands,proto3" json:"operands,omitempty"`
}

func (x *OpVariadic) Reset() {
	*x = OpVariadic{}
	mi := &file_exprml_v1_expr_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpVariadic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpVariadic) ProtoMessage() {}

func (x *OpVariadic) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpVariadic.ProtoReflect.Descriptor instead.
func (*OpVariadic) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{13}
}

func (x *OpVariadic) GetOp() OpVariadic_Op {
	if x != nil {
		return x.Op
	}
	return OpVariadic_UNSPECIFIED
}

func (x *OpVariadic) GetOperands() []*Expr {
	if x != nil {
		return x.Operands
	}
	return nil
}

// Path represents a path to the Node.
type Expr_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pos is a position in the path.
	Pos []*Expr_Path_Pos `protobuf:"bytes,1,rep,name=pos,proto3" json:"pos,omitempty"`
}

func (x *Expr_Path) Reset() {
	*x = Expr_Path{}
	mi := &file_exprml_v1_expr_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Path) ProtoMessage() {}

func (x *Expr_Path) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Path.ProtoReflect.Descriptor instead.
func (*Expr_Path) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Expr_Path) GetPos() []*Expr_Path_Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

// Pos represents a position in the path.
type Expr_Path_Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index is the index of the position.
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Key is the key of the position.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Expr_Path_Pos) Reset() {
	*x = Expr_Path_Pos{}
	mi := &file_exprml_v1_expr_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_Path_Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Path_Pos) ProtoMessage() {}

func (x *Expr_Path_Pos) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Path_Pos.ProtoReflect.Descriptor instead.
func (*Expr_Path_Pos) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Expr_Path_Pos) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Expr_Path_Pos) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Definition is a function or variable definition.
type Eval_Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ident is the identifier of the definition.
	Ident string `protobuf:"bytes,1,opt,name=ident,proto3" json:"ident,omitempty"`
	// Args is the list of arguments.
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// Body is the body of the definition.
	Body *Expr `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Eval_Definition) Reset() {
	*x = Eval_Definition{}
	mi := &file_exprml_v1_expr_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Eval_Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eval_Definition) ProtoMessage() {}

func (x *Eval_Definition) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eval_Definition.ProtoReflect.Descriptor instead.
func (*Eval_Definition) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Eval_Definition) GetIdent() string {
	if x != nil {
		return x.Ident
	}
	return ""
}

func (x *Eval_Definition) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Eval_Definition) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

// Case is a conditional branch.
type Cases_Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the case is otherwise.
	IsOtherwise bool `protobuf:"varint,1,opt,name=is_otherwise,json=isOtherwise,proto3" json:"is_otherwise,omitempty"`
	// When is the condition of the case.
	When *Expr `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
	// Then is the body of the case.
	Then *Expr `protobuf:"bytes,3,opt,name=then,proto3" json:"then,omitempty"`
	// Otherwise is the body of the case.
	Otherwise *Expr `protobuf:"bytes,4,opt,name=otherwise,proto3" json:"otherwise,omitempty"`
}

func (x *Cases_Case) Reset() {
	*x = Cases_Case{}
	mi := &file_exprml_v1_expr_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cases_Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cases_Case) ProtoMessage() {}

func (x *Cases_Case) ProtoReflect() protoreflect.Message {
	mi := &file_exprml_v1_expr_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cases_Case.ProtoReflect.Descriptor instead.
func (*Cases_Case) Descriptor() ([]byte, []int) {
	return file_exprml_v1_expr_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Cases_Case) GetIsOtherwise() bool {
	if x != nil {
		return x.IsOtherwise
	}
	return false
}

func (x *Cases_Case) GetWhen() *Expr {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Cases_Case) GetThen() *Expr {
	if x != nil {
		return x.Then
	}
	return nil
}

func (x *Cases_Case) GetOtherwise() *Expr {
	if x != nil {
		return x.Otherwise
	}
	return nil
}

var File_exprml_v1_expr_proto protoreflect.FileDescriptor

var file_exprml_v1_expr_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76,
	0x31, 0x1a, 0x15, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x07, 0x0a, 0x04, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a,
	0x04, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x65, 0x76,
	0x61, 0x6c, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x20, 0x0a,
	0x03, 0x72, 0x65, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12,
	0x20, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x52, 0x03, 0x6f, 0x62,
	0x6a, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x52, 0x03,
	0x61, 0x72, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c,
	0x65, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x30,
	0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x36, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x52, 0x0a, 0x6f, 0x70,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x1a, 0x61, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x1a, 0x2d, 0x0a, 0x03,
	0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x0a, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x45, 0x46, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x42, 0x4a, 0x10, 0x0d, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x52, 0x52, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x0f,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x54, 0x45, 0x52, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x4c,
	0x45, 0x4d, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x12, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x41, 0x53, 0x45, 0x53, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x5f,
	0x55, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x5f, 0x56, 0x41, 0x52,
	0x49, 0x41, 0x44, 0x49, 0x43, 0x10, 0x16, 0x22, 0xba, 0x01, 0x0a, 0x04, 0x45, 0x76, 0x61, 0x6c,
	0x12, 0x23, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x04, 0x65, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x5b, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12,
	0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x32, 0x0a, 0x06, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x22, 0x1b, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x03, 0x4f, 0x62, 0x6a, 0x12, 0x29, 0x0a, 0x03,
	0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x2e, 0x4f, 0x62, 0x6a, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x1a, 0x47, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x28, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x61, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x61, 0x72, 0x72, 0x22, 0x2c, 0x0a, 0x04, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x63, 0x6f, 0x6c,
	0x12, 0x1f, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65,
	0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x02, 0x64,
	0x6f, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x02,
	0x69, 0x66, 0x22, 0x4e, 0x0a, 0x04, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x03, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x22, 0x95, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x1a, 0x48, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x05, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x77, 0x68,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x77, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x25, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x22, 0x51, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x45, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x4f, 0x52,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x45, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x22, 0xda, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5a, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x55, 0x42, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x56, 0x10,
	0x02, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51,
	0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54,
	0x45, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x54, 0x45, 0x10, 0x08, 0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x64, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2b, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x02, 0x4f, 0x70,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55,
	0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x07, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x08, 0x42, 0x92, 0x01, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x45, 0x78,
	0x70, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2f, 0x65, 0x78, 0x70,
	0x72, 0x6d, 0x6c, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c,
	0x2f, 0x76, 0x31, 0x3b, 0x65, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x45,
	0x58, 0x58, 0xaa, 0x02, 0x09, 0x45, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x09, 0x45, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x45, 0x78, 0x70,
	0x72, 0x6d, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x6d, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exprml_v1_expr_proto_rawDescOnce sync.Once
	file_exprml_v1_expr_proto_rawDescData = file_exprml_v1_expr_proto_rawDesc
)

func file_exprml_v1_expr_proto_rawDescGZIP() []byte {
	file_exprml_v1_expr_proto_rawDescOnce.Do(func() {
		file_exprml_v1_expr_proto_rawDescData = protoimpl.X.CompressGZIP(file_exprml_v1_expr_proto_rawDescData)
	})
	return file_exprml_v1_expr_proto_rawDescData
}

var file_exprml_v1_expr_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_exprml_v1_expr_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_exprml_v1_expr_proto_goTypes = []any{
	(Expr_Kind)(0),          // 0: exprml.v1.Expr.Kind
	(OpUnary_Op)(0),         // 1: exprml.v1.OpUnary.Op
	(OpBinary_Op)(0),        // 2: exprml.v1.OpBinary.Op
	(OpVariadic_Op)(0),      // 3: exprml.v1.OpVariadic.Op
	(*Expr)(nil),            // 4: exprml.v1.Expr
	(*Eval)(nil),            // 5: exprml.v1.Eval
	(*Scalar)(nil),          // 6: exprml.v1.Scalar
	(*Ref)(nil),             // 7: exprml.v1.Ref
	(*Obj)(nil),             // 8: exprml.v1.Obj
	(*Arr)(nil),             // 9: exprml.v1.Arr
	(*Json)(nil),            // 10: exprml.v1.Json
	(*Iter)(nil),            // 11: exprml.v1.Iter
	(*Elem)(nil),            // 12: exprml.v1.Elem
	(*Call)(nil),            // 13: exprml.v1.Call
	(*Cases)(nil),           // 14: exprml.v1.Cases
	(*OpUnary)(nil),         // 15: exprml.v1.OpUnary
	(*OpBinary)(nil),        // 16: exprml.v1.OpBinary
	(*OpVariadic)(nil),      // 17: exprml.v1.OpVariadic
	(*Expr_Path)(nil),       // 18: exprml.v1.Expr.Path
	(*Expr_Path_Pos)(nil),   // 19: exprml.v1.Expr.Path.Pos
	(*Eval_Definition)(nil), // 20: exprml.v1.Eval.Definition
	nil,                     // 21: exprml.v1.Obj.ObjEntry
	nil,                     // 22: exprml.v1.Call.ArgsEntry
	(*Cases_Case)(nil),      // 23: exprml.v1.Cases.Case
	(*Value)(nil),           // 24: exprml.v1.Value
}
var file_exprml_v1_expr_proto_depIdxs = []int32{
	18, // 0: exprml.v1.Expr.path:type_name -> exprml.v1.Expr.Path
	24, // 1: exprml.v1.Expr.value:type_name -> exprml.v1.Value
	0,  // 2: exprml.v1.Expr.kind:type_name -> exprml.v1.Expr.Kind
	5,  // 3: exprml.v1.Expr.eval:type_name -> exprml.v1.Eval
	6,  // 4: exprml.v1.Expr.scalar:type_name -> exprml.v1.Scalar
	7,  // 5: exprml.v1.Expr.ref:type_name -> exprml.v1.Ref
	8,  // 6: exprml.v1.Expr.obj:type_name -> exprml.v1.Obj
	9,  // 7: exprml.v1.Expr.arr:type_name -> exprml.v1.Arr
	10, // 8: exprml.v1.Expr.json:type_name -> exprml.v1.Json
	11, // 9: exprml.v1.Expr.iter:type_name -> exprml.v1.Iter
	12, // 10: exprml.v1.Expr.elem:type_name -> exprml.v1.Elem
	13, // 11: exprml.v1.Expr.call:type_name -> exprml.v1.Call
	14, // 12: exprml.v1.Expr.cases:type_name -> exprml.v1.Cases
	15, // 13: exprml.v1.Expr.op_unary:type_name -> exprml.v1.OpUnary
	16, // 14: exprml.v1.Expr.op_binary:type_name -> exprml.v1.OpBinary
	17, // 15: exprml.v1.Expr.op_variadic:type_name -> exprml.v1.OpVariadic
	4,  // 16: exprml.v1.Eval.eval:type_name -> exprml.v1.Expr
	20, // 17: exprml.v1.Eval.where:type_name -> exprml.v1.Eval.Definition
	24, // 18: exprml.v1.Scalar.scalar:type_name -> exprml.v1.Value
	21, // 19: exprml.v1.Obj.obj:type_name -> exprml.v1.Obj.ObjEntry
	4,  // 20: exprml.v1.Arr.arr:type_name -> exprml.v1.Expr
	24, // 21: exprml.v1.Json.json:type_name -> exprml.v1.Value
	4,  // 22: exprml.v1.Iter.col:type_name -> exprml.v1.Expr
	4,  // 23: exprml.v1.Iter.do:type_name -> exprml.v1.Expr
	4,  // 24: exprml.v1.Iter.if:type_name -> exprml.v1.Expr
	4,  // 25: exprml.v1.Elem.get:type_name -> exprml.v1.Expr
	4,  // 26: exprml.v1.Elem.from:type_name -> exprml.v1.Expr
	22, // 27: exprml.v1.Call.args:type_name -> exprml.v1.Call.ArgsEntry
	23, // 28: exprml.v1.Cases.cases:type_name -> exprml.v1.Cases.Case
	1,  // 29: exprml.v1.OpUnary.op:type_name -> exprml.v1.OpUnary.Op
	4,  // 30: exprml.v1.OpUnary.operand:type_name -> exprml.v1.Expr
	2,  // 31: exprml.v1.OpBinary.op:type_name -> exprml.v1.OpBinary.Op
	4,  // 32: exprml.v1.OpBinary.left:type_name -> exprml.v1.Expr
	4,  // 33: exprml.v1.OpBinary.right:type_name -> exprml.v1.Expr
	3,  // 34: exprml.v1.OpVariadic.op:type_name -> exprml.v1.OpVariadic.Op
	4,  // 35: exprml.v1.OpVariadic.operands:type_name -> exprml.v1.Expr
	19, // 36: exprml.v1.Expr.Path.pos:type_name -> exprml.v1.Expr.Path.Pos
	4,  // 37: exprml.v1.Eval.Definition.body:type_name -> exprml.v1.Expr
	4,  // 38: exprml.v1.Obj.ObjEntry.value:type_name -> exprml.v1.Expr
	4,  // 39: exprml.v1.Call.ArgsEntry.value:type_name -> exprml.v1.Expr
	4,  // 40: exprml.v1.Cases.Case.when:type_name -> exprml.v1.Expr
	4,  // 41: exprml.v1.Cases.Case.then:type_name -> exprml.v1.Expr
	4,  // 42: exprml.v1.Cases.Case.otherwise:type_name -> exprml.v1.Expr
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_exprml_v1_expr_proto_init() }
func file_exprml_v1_expr_proto_init() {
	if File_exprml_v1_expr_proto != nil {
		return
	}
	file_exprml_v1_value_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exprml_v1_expr_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_exprml_v1_expr_proto_goTypes,
		DependencyIndexes: file_exprml_v1_expr_proto_depIdxs,
		EnumInfos:         file_exprml_v1_expr_proto_enumTypes,
		MessageInfos:      file_exprml_v1_expr_proto_msgTypes,
	}.Build()
	File_exprml_v1_expr_proto = out.File
	file_exprml_v1_expr_proto_rawDesc = nil
	file_exprml_v1_expr_proto_goTypes = nil
	file_exprml_v1_expr_proto_depIdxs = nil
}
